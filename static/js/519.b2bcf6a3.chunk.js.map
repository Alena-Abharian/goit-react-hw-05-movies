{"version":3,"file":"static/js/519.b2bcf6a3.chunk.js","mappings":"4TAEMA,EAAY,8BACZC,EAAe,mCAGd,SAAeC,IAAtB,+B,aAAO,O,oBAAA,6GAEoBC,IAAAA,IAAA,UAAaH,EAAb,wCAAsDC,IAF1E,cAEGG,EAFH,yBAGIA,EAASC,KAAKC,SAHlB,gCAKHC,QAAQC,MAAM,KAAIC,SALf,gFAUA,SAAeC,EAAtB,kC,aAAO,O,oBAAA,WAAwBC,GAAxB,gGAEoBR,IAAAA,IAAA,UAAaH,EAAb,mBAAiCW,EAAjC,oBAAoDV,IAFxE,cAEGG,EAFH,yBAGIA,EAASC,MAHb,gCAKHE,QAAQC,MAAM,KAAIC,SALf,gFAUA,SAAeG,EAAtB,kC,aAAO,O,oBAAA,WAA4BC,GAA5B,gGAEoBV,IAAAA,IAAA,UAAaH,EAAb,kCAAgDC,EAAhD,kBAAsEY,IAF1F,cAEGT,EAFH,yBAGIA,EAASC,KAAKC,SAHlB,gCAKHC,QAAQC,MAAM,KAAIC,SALf,gFAUA,SAAeK,EAAtB,kC,aAAO,O,oBAAA,WAAuBH,GAAvB,gGAEoBR,IAAAA,IAAA,UAAaH,EAAb,mBAAiCW,EAAjC,4BAA4DV,IAFhF,cAEGG,EAFH,yBAGIA,EAASC,KAAKU,MAHlB,gCAKHR,QAAQC,MAAM,KAAIC,SALf,gFAUA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAA0BL,GAA1B,gGAEoBR,IAAAA,IAAA,6CAAgDQ,EAAhD,sDAFpB,cAEGP,EAFH,yBAGIA,EAASC,KAAKC,SAHlB,gCAKHC,QAAQC,MAAM,KAAIC,SALf,gF,oJC5CMQ,EAAYC,EAAAA,GAAAA,GAAH,0HAQTC,EAAOD,EAAAA,GAAAA,GAAH,+HAQJE,EAAQF,EAAAA,GAAAA,GAAH,yFAMLG,EAAOH,EAAAA,GAAAA,EAAH,0D,mBCKjB,EAtBa,WACX,OAAwBI,EAAAA,EAAAA,UAAS,IAAjC,eAAOP,EAAP,KAAaQ,EAAb,KACQZ,GAAYa,EAAAA,EAAAA,MAAZb,QAOR,OALAc,EAAAA,EAAAA,YAAU,YACRX,EAAAA,EAAAA,IAAQH,GACLe,MAAK,SAAArB,GAAI,OAAIkB,EAAQlB,EAAZ,GACb,GAAE,CAACM,KAGF,SAACgB,EAAA,EAAD,CAAKC,GAAG,UAAUC,GAAI,IAAKC,GAAI,GAA/B,UACE,SAACb,EAAD,UACGF,EAAKgB,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,GAAIC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,OAA2C,UAAChB,EAAD,WAClDgB,GAAgB,gBAAKC,IAAG,0CAAqCD,GAAgBE,IAAKL,EAAMM,MAAO,OAC9F,SAAC,MAAD,CAAeC,KAAK,WACtB,SAACnB,EAAD,UAAQY,KACR,SAACX,EAAD,UAAOa,MAJuDD,EAAtD,OASjB,C","sources":["api/api.js","components/cast/Cast.styled.jsx","components/cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASIC_URL = 'https://api.themoviedb.org/';\nconst PERSONAL_KEY = 'ad66edf283bb948b384e974542ed7aed';\n\n//page Home\nexport async function fetchTrendingMovies() {\n  try {\n    const response = await axios.get(`${BASIC_URL}3/trending/movie/day?api_key=${PERSONAL_KEY}`);\n    return response.data.results;\n  } catch (err) {\n    console.error(err.message);\n  }\n}\n\n//page MovieDetails\nexport async function getMovie(movieId) {\n  try {\n    const response = await axios.get(`${BASIC_URL}3/movie/${movieId}?api_key=${PERSONAL_KEY}`);\n    return response.data;\n  } catch (err) {\n    console.error(err.message);\n  }\n}\n\n//page Movies\nexport async function searchMovies(query) {\n  try {\n    const response = await axios.get(`${BASIC_URL}3/search/movie?api_key=${PERSONAL_KEY}&query=${query}`);\n    return response.data.results;\n  } catch (err) {\n    console.error(err.message);\n  }\n}\n\n//page Cast\nexport async function getCast(movieId) {\n  try {\n    const response = await axios.get(`${BASIC_URL}3/movie/${movieId}/credits?api_key=${PERSONAL_KEY}`);\n    return response.data.cast;\n  } catch (err) {\n    console.error(err.message);\n  }\n}\n\n//page Reviews\nexport async function getReviews(movieId) {\n  try {\n    const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=ad66edf283bb948b384e974542ed7aed`);\n    return response.data.results;\n  } catch (err) {\n    console.error(err.message);\n  }\n}\n","import styled from 'styled-components';\n\nexport const ActorList = styled.ul`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  list-style: none;\n  padding: 0;\n`;\n\nexport const Item = styled.li`\n  margin: 20px;\n  width: 150px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const Title = styled.h2`\n  font-size: 16px;\n  margin-bottom: 10px;\n  margin-top: 10px;\n`;\n\nexport const Text = styled.p`\n  font-size: 14px;\n  margin: 0;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCast } from '../../api/api';\nimport Box from '../Box';\nimport { ActorList, Item, Title, Text } from './Cast.styled';\nimport { AiOutlineStop } from 'react-icons/ai';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getCast(movieId)\n      .then(data => setCast(data));\n  }, [movieId]);\n\n  return (\n    <Box as='section' pl={230} pr={20}>\n      <ActorList>\n        {cast.map(({ name, id, character, profile_path }) => <Item key={id}>\n          {profile_path ? (<img src={`https://image.tmdb.org/t/p/w500/${profile_path}`} alt={name} width={100} />) : (\n            <AiOutlineStop size='100px' />)}\n          <Title>{name}</Title>\n          <Text>{character}</Text>\n        </Item>)}\n      </ActorList>\n    </Box>\n  );\n};\nexport default Cast;\n"],"names":["BASIC_URL","PERSONAL_KEY","fetchTrendingMovies","axios","response","data","results","console","error","message","getMovie","movieId","searchMovies","query","getCast","cast","getReviews","ActorList","styled","Item","Title","Text","useState","setCast","useParams","useEffect","then","Box","as","pl","pr","map","name","id","character","profile_path","src","alt","width","size"],"sourceRoot":""}